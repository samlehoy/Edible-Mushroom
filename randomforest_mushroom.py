# -*- coding: utf-8 -*-
"""RandomForest_Mushroom.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hjs2CgX6nX4lv8nzcUaKQPJ8S8XcArGF
"""

# NO 1
# Import Library yang dibutuhkan
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from imblearn.metrics import classification_report_imbalanced
from sklearn.metrics import classification_report
from sklearn.metrics import ConfusionMatrixDisplay
import ipywidgets as widgets
from IPython.display import display, clear_output

"""Load Dataset"""

# NO 2
# Load Dataset dari URL
url = "https://raw.githubusercontent.com/dataset-machine-learning/mushroom/refs/heads/main/mushroom.csv"
data = pd.read_csv(url, sep=';')
print("Contoh Data Awal:")
display(data.head())

# Visualisasi distribusi target class
plt.figure(figsize=(6,4))
sns.countplot(data['class'])
plt.title("Distribusi Kelas (Edible vs Poisonous)")
plt.xlabel("Kelas")
plt.ylabel("Jumlah")
plt.show()

"""TAHAP EDA / PREPROCESSING -- DATVIS"""

# NO 3
# MELIHAT ADA DATA KOSONG ATAU TIDAK
print("Jumlah data kosong tiap kolom:")
print(data.isnull().sum())

# MERUBAH HURUF MENJADI ANGKA
le = LabelEncoder()
for col in data.columns:
    data[col] = le.fit_transform(data[col])

# SEBELUM DI HAPUS YANG DUPLIKAT
print(f"Jumlah data sebelum menghapus duplikat: {data.shape[0]}")

# MENGHAPUS DUPLIKAT
data.drop_duplicates(inplace=True)

# SETELAH DI HAPUS
print(f"Jumlah data setelah menghapus duplikat: {data.shape[0]}")

# HAPUS KOLOM YANG TERLALU BERPENGARUH
data.drop(columns=['gill-spacing', 'gill-size', 'stalk-surface-above-ring',
                   'stalk-surface-below-ring','spore-print-color', 'gill-color',
                   'stalk-color-below-ring', 'stalk-color-above-ring'], inplace=True)


# MEMISAHKAN FITUR DAN TARGET (MENJADIKAN CLASS SEBAGAI TARGET)
X = data.drop(columns=['class'])
y = data['class']

display(data.head())

# data

# NO 4
# TAMPIL DATA TARGET
pd.DataFrame(y).head()

# NO 5
# Membagi data menjadi data training dan data testing

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 42)

# NO 6
# Inisiasi Model

model = RandomForestClassifier(
    n_estimators=10,
    max_depth=4,
    min_samples_split=10,
    min_samples_leaf=5,
    random_state=42
)

# Training model dengan .fit()
model.fit(X_train, y_train)
importances = model.feature_importances_
important_features = pd.Series(importances, index=X.columns).sort_values(ascending=False)
print(important_features)

# NO 7
# Prediksi pada data test

y_pred = model.predict(X_test)
y_pred

# NO 8
# NILAI AKTUAL
y_test

# NO 9
# Memeriksa antara hasil prediksi dan data aktual

df = pd.DataFrame({'Prediksi': y_pred, 'Aktual': y_test})
df

# NO 10
# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
conf_matrix


plt.figure(figsize=(6,6))
disp = ConfusionMatrixDisplay(conf_matrix, display_labels=model.classes_)
disp.plot(cmap='Blues', values_format='d')
plt.title("Confusion Matrix")
plt.show()

# NO 11
# Evaluasi Kinerja
print(f"accuracy_score {accuracy_score(y_test, y_pred)}")
print(classification_report_imbalanced(y_test, y_pred))

report = classification_report(y_test, y_pred, output_dict=True)
report_df = pd.DataFrame(report).transpose()

# Hanya ambil precision, recall, f1-score
report_df = report_df[['precision', 'recall', 'f1-score']]

report_df.plot(kind='bar', figsize=(10,6))
plt.title("Classification Report")
plt.ylabel("Skor")
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# NO 12
# URL dataset
url = "https://raw.githubusercontent.com/dataset-machine-learning/mushroom/refs/heads/main/mushroom.csv"

# ==============================================================================
#           >> FITUR INPUTAN INTERAKTIF MENGGUNAKAN DROPDOWN (LABEL INDONESIA) <<
# ==============================================================================

# Baca data asli
# Use the correct delimiter and let pandas infer headers
original_df = pd.read_csv(url, sep=';')


# Kolom fitur (gantilah sesuai dataset kamu)
columns = [
    'cap-shape', 'cap-color','cap-surface', 'bruises',
    'stalk-shape', 'stalk-root',
    'veil-color', 'population', 'habitat'
]


# Label kolom dalam Bahasa Indonesia
label_indonesia = {
    'cap-shape': 'Bentuk Tudung',
    'cap-color': 'Warna Tudung',
    'cap-surface': 'Permukaan Tudung',
    'bruises': 'Memar',
    'stalk-shape': 'Bentuk Batang',
    'stalk-root': 'Akar Batang',
    'veil-color': 'Warna Selubung',
    'population': 'Populasi',
    'habitat': 'Habitat',
}

# Mapping nilai fitur ke Bahasa Indonesia
opsi_mapping = {
    'cap-shape': {'bell': 'Lonceng', 'conical': 'Kerucut', 'convex': 'Cembung', 'flat': 'Datar', 'knobbed': 'Tonjolan', 'sunken': 'Cekung'},
    'cap-surface': {'fibrous': 'Berserat', 'groovesmooth': 'Beralur', 'scaly': 'Bersisik', 'smooth': 'Halus'},
    'cap-color': {'brown': 'Coklat', 'buff': 'Coklat Kekuningan', 'cinnamon': 'Kayu Manis', 'gray': 'Abu-abu', 'green': 'Hijau', 'pink': 'Merah Muda', 'purple': 'Ungu', 'red': 'Merah', 'white': 'Putih', 'yellow': 'Kuning'},
    'bruises': {'bruises': 'Ya', 'no': 'Tidak'},
    'stalk-shape': {'enlarging': 'Membesar', 'tapering': 'Mengecil'},
    'stalk-root': {'?': '?', 'bulbous': 'Menggelmbung', 'club': 'Tongkat', 'equal': 'Sama Besar', 'rooted': 'Berakar Kuat'},
    'veil-color': {'brown': 'Coklat', 'orange': 'Oranye', 'white': 'Putih', 'yellow': 'Kuning'},
    'population': {'abundant': 'Sangat Banyak', 'clustered': 'Bergerombol', 'numerous': 'Banyak', 'scattered': 'Tersebar', 'several': 'Beberapa', 'solitary': 'Sendirian'},
    'habitat': {'grasses': 'Rerumputan', 'leaves': 'Dedaunan', 'meadows': 'Padang Rumput', 'paths': 'Jalan Setapak', 'urban': 'Perkotaan', 'waste': 'Tempat Sampah', 'woods': 'Hutan'},
}

# Dictionary untuk widget dropdown
input_widgets = {}

print("Silakan pilih karakteristik jamur di bawah ini:")

# Buat dropdown berdasarkan kolom
for col in columns: # Iterate through the selected columns
    options = sorted(original_df[col].unique())
    if col in opsi_mapping:
        # Create mapped options, ensuring all original options have a mapping
        mapped_options = [(opsi_mapping[col].get(opt, opt), opt) for opt in options]
    else:
        mapped_options = [(opt, opt) for opt in options]

    input_widgets[col] = widgets.Dropdown(
        options=mapped_options,
        description=label_indonesia.get(col, col),
        disabled=False,
        layout=widgets.Layout(width='50%')
    )
    display(input_widgets[col])

# ==============================================================================
#           >> TOMBOL PREDIKSI <<
# ==============================================================================

button = widgets.Button(description="🔍 Prediksi Sekarang!")
output = widgets.Output()

# Asumsikan model sudah dimuat sebelumnya ke variabel `model`
def on_button_clicked(b):
    with output:
        clear_output()

        # Ambil nilai dari dropdown
        user_input = {}
        for col, widget in input_widgets.items():
            user_input[col] = widget.value

        # Ubah menjadi DataFrame
        input_df_raw = pd.DataFrame([user_input])
        input_df_encoded = pd.DataFrame()

        # Lakukan encoding
        for col in columns:
            le = LabelEncoder().fit(original_df[col])
            try:
                input_df_encoded[col] = le.transform(input_df_raw[col])
            except ValueError as e:
                print(f"⚠️ Error saat encoding kolom {col}: {e}")
                print(f"Value causing error in {col}: {input_df_raw[col].iloc[0]}")
                return

        # Pastikan urutan kolom sesuai dengan data pelatihan
        input_df_encoded = input_df_encoded[X.columns]

        # Prediksi dan probabilitas
        prediction = model.predict(input_df_encoded)
        probabilities = model.predict_proba(input_df_encoded)[0]  # hanya satu data, jadi ambil indeks 0

        edible_prob = probabilities[0] * 100  # diasumsikan 0 = edible
        poisonous_prob = probabilities[1] * 100

        hasil = '✅ **Bisa Dimakan (Edible)**' if prediction[0] == 0 else '⚠️ **Beracun (Poisonous)**'

        # Tampilkan hasil
        print("\n🎉 **HASIL PREDIKSI JAMUR** 🎉")
        print("------------------------------------------")
        print(f"Hasil prediksi berdasarkan input Anda: {hasil}")
        print(f"📊 Probabilitas bisa dimakan: {edible_prob:.2f}%")
        print(f"☠️ Probabilitas beracun: {poisonous_prob:.2f}%")
        print("------------------------------------------")


# Tampilkan tombol dan output
button.on_click(on_button_clicked)
display(button, output)